import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from pytube import YouTube
from pytube import Channel


class YouTubeDownloaderApp:
    def __init__(self, master):
        self.master = master
        master.title("YouTube Video Downloader")

        # Video URL entry
        self.label_url = tk.Label(master, text="Enter YouTube Video URL:")
        self.label_url.pack()
        self.entry_url = tk.Entry(master, width=50)
        self.entry_url.pack()

        # Channel URL entry
        self.label_channel_url = tk.Label(master, text="Enter YouTube Channel URL:")
        self.label_channel_url.pack()
        self.entry_channel_url = tk.Entry(master, width=50)
        self.entry_channel_url.pack()

        # Output path entry
        self.label_path = tk.Label(master, text="Select Output Path:")
        self.label_path.pack()
        self.output_path = tk.StringVar()
        self.entry_path = tk.Entry(master, textvariable=self.output_path, width=40)
        self.entry_path.pack()
        self.button_browse = tk.Button(master, text="Browse", command=self.browse_output_path)
        self.button_browse.pack()

        # Download button
        self.button_download = tk.Button(master, text="Download", command=self.download_video_or_channel)
        self.button_download.pack()

        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(master, variable=self.progress_var, length=200, mode='determinate')
        self.progress_bar.pack()

        # Status label
        self.status_var = tk.StringVar()
        self.label_status = tk.Label(master, textvariable=self.status_var)
        self.label_status.pack()

    def browse_output_path(self):
        folder_selected = filedialog.askdirectory()
        self.output_path.set(folder_selected)

    def download_progress_callback(self, stream, chunk, bytes_remaining):
        total_size = stream.filesize
        bytes_downloaded = total_size - bytes_remaining
        percentage = (bytes_downloaded / total_size) * 100
        self.progress_var.set(percentage)
        self.status_var.set(f"Downloading... {percentage:.2f}%")

    def download_video(self, video_url, output_path):
        try:
            # Create a YouTube object
            youtube = YouTube(video_url, on_progress_callback=self.download_progress_callback)

            # Get the highest resolution stream
            video_stream = youtube.streams.get_highest_resolution()

            # Download the video
            video_stream.download(output_path)

            print(f"Download complete for {video_url}!")

        except Exception as e:
            print(f"An error occurred: {e}")

    def download_channel_videos(self, channel_url, output_path):
        try:
            # Create a Channel object
            channel = Channel(channel_url)

            # Get all videos in the channel
            videos = channel.video_urls

            # Download each video
            for video_url in videos:
                self.download_video(video_url, output_path)

            print("Download complete for all videos in the channel!")

        except Exception as e:
            print(f"An error occurred: {e}")

    def download_video_or_channel(self):
        video_url = self.entry_url.get()
        channel_url = self.entry_channel_url.get()
        output_path = self.output_path.get()

        if video_url and output_path:
            self.download_video(video_url, output_path)
        elif channel_url and output_path:
            self.download_channel_videos(channel_url, output_path)
        else:
            print("Please provide either a video URL or a channel URL along with the output path.")


def main():
    root = tk.Tk()
    app = YouTubeDownloaderApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
